import cv2
import mediapipe as mp

mp_drawing = mp.solutions.drawing_utils
mp_face_detection = mp.solutions.face_detection
mp_pose = mp.solutions.pose
mp_hands = mp.solutions.hands
mp_drawing_styles = mp.solutions.drawing_styles

# Initialize webcam
cap = cv2.VideoCapture(0)

# Initialize Face Detection, Pose Detection, and Hand Detection
with mp_face_detection.FaceDetection(
        model_selection=0, min_detection_confidence=0.5) as face_detection, \
        mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose, \
        mp_hands.Hands(max_num_hands=2, min_detection_confidence=0.5,
                       min_tracking_confidence=0.5) as hands:

    while True:
        # Capture frame-by-frame
        ret, image = cap.read()
        if not ret:
            print("Failed to grab frame")
            break

        # Flip the image horizontally for a selfie-view display
        image = cv2.flip(image, 1)
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        # Perform face detection
        face_results = face_detection.process(image_rgb)

        # Perform pose detection
        pose_results = pose.process(image_rgb)

        # Perform hands detection
        hands_results = hands.process(image_rgb)

        # Draw face detection annotations
        if face_results.detections:
            for detection in face_results.detections:
                mp_drawing.draw_detection(image, detection)

        # Draw pose landmarks
        if pose_results.pose_landmarks:
            mp_drawing.draw_landmarks(
                image,
                pose_results.pose_landmarks,
                mp_pose.POSE_CONNECTIONS,
                landmark_drawing_spec=mp_drawing_styles.get_default_pose_landmarks_style())

        # Draw hand landmarks and calculate distance between fingers
        if hands_results.multi_hand_landmarks:
            for idx, hand_landmarks in enumerate(hands_results.multi_hand_landmarks):
                finger1 = int(hand_landmarks.landmark[4].x * 100)
                finger2 = int(hand_landmarks.landmark[8].x * 100)
                dist = abs(finger1 - finger2)
                text = f'Hand {idx + 1}: f1={finger1} f2={finger2} dist={dist}'
                cv2.putText(
                    image, text, org=(10, 30 + idx * 40),
                    fontFace=cv2.FONT_HERSHEY_SIMPLEX, fontScale=1,
                    color=(255, 0, 0), thickness=3)

                mp_drawing.draw_landmarks(
                    image, hand_landmarks, mp_hands.HAND_CONNECTIONS)

        # Display the annotated image
        cv2.imshow('MediaPipe Combined', image)

        # Check for 'ESC' key press to exit
        key = cv2.waitKey(1)
        if key == 27:  # ASCII code for 'ESC' key is 27.
            break

# When everything is done, release the capture and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()
